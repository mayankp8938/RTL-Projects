`timescale 1ns/1ps
module CLA_4bit (A,B,Cin,Cout,Sum,out);
input [3:0]A,B;
input Cin;
output [3:0]Sum;
output Cout;
output [4:0]out;

wire [3:0]P,G,C;

assign C[0] = Cin;
assign P = A^B; // carry propagate 
assign G = A&B; // Carry generate 

//Ci+1  = gi + pi.ci;

assign C[1] = G[0] | P[0]&C[0];
assign C[2] = G[1]|(P[1]&(G[0] | P[0]&C[0]));
assign C[3] = G[2] | (P[2]&(G[1]|(P[1]&(G[0] | P[0]&C[0]))));
assign Cout = G[3] | (P[3]&(G[2] | (P[2]&(G[1]|(P[1]&(G[0] | P[0]&C[0]))))));
assign Sum  = P^C; // Sum = p xor c;
assign out = {Cout,Sum};

endmodule
